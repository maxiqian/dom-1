{"mappings":"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","sources":["src/dom.js"],"sourcesContent":["window.dom = {\r\n    // 增\r\n    // create:function(){}\r\n    // create(tagName){\r\n    //     return document.createElement(tagName);\r\n    // }\r\n    create(string){\r\n        //template\r\n        const container = document.createElement(\"template\");\r\n        container.innerHTML = string.trim();\r\n        //为什么要这样写\r\n        return container.content.firstChild;\r\n    },\r\n    after(node,node2){\r\n        node.parentNode.insertBefore(node2,node.nextSibling);\r\n    },\r\n    before(node,node2){\r\n        node.parentNode.insertBefore(node2,node);\r\n    },\r\n    append(parent,node){\r\n        parent.appendChild(node);\r\n    },\r\n    wrap(node,parent){\r\n        //将新的父节点parent插入到node节点的前面\r\n        dom.before(node,parent);\r\n        //将node节点作为儿子新增到parent节点的里面\r\n        dom.append(parent,node);\r\n    },\r\n\r\n    // 删\r\n    remove(node){\r\n        node.parentNode.removeChild(node);\r\n        return node;\r\n    },\r\n    empty(node){\r\n        // const childNodes = node.childNodes; \r\n        // 更高级的写法\r\n        const {childNodes} = node;\r\n        const array = [];\r\n        let x = node.firstChild;\r\n       while(x){\r\n        array.push(dom.remove(node.firstChild));\r\n        // x等于删除node第一个儿子后的新的第一个儿子\r\n        x = node.firstChild;\r\n       }\r\n        return array;\r\n    },\r\n\r\n    // 改\r\n    attr(node,name,value){//重载\r\n        if(arguments.length === 3){\r\n            node.setAttribute(name,value);\r\n        }else if(arguments.length === 2){\r\n            return node.getAttribute(name);\r\n        }\r\n    },\r\n    text(node,string){\r\n        if(arguments.length === 2){\r\n            // 适配\r\n            if('innerText' in node){ \r\n                node.innerText = string; \r\n            }else{\r\n                node.textContent = string;\r\n            }  \r\n        }else if(arguments.length === 1){\r\n            if('innerText' in node){ \r\n                return node.innerText; \r\n            }else{\r\n                return node.textContent;\r\n            }  \r\n        }\r\n    },\r\n    html(node,string){\r\n        if(arguments.length === 2){\r\n            node.innerHTML = string;\r\n        }else if(arguments.length === 1){\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n    style(node,name,value){\r\n        if(arguments.length === 3){\r\n            // dom.style(div,'color','red)\r\n            node.style[name] = value;\r\n        }else if(arguments.length === 2){\r\n            if(typeof name === 'string'){\r\n                // dom.style(div,'color')\r\n                return node.style[name];\r\n            }else if (name instanceof Object){\r\n                // dom.style(div,{color:'red'})\r\n                const object = name;\r\n                for(let key in object){\r\n                    // key:border/color\r\n                    // node.style.border=... node.style.color=...\r\n                    // 这里的key是个变量\r\n                    node.style[key] = object[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class:{\r\n        add(node,className){\r\n            node.classList.add(className);\r\n        },\r\n        remove(node,className){\r\n            node.classList.remove(className);\r\n        },\r\n        contains(node,className){\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n    on(node,eventName,fn){\r\n        node.addEventListener(eventName,fn);\r\n    },\r\n    off(node,eventName,fn){\r\n        node.removeEventListener(eventName,fn);\r\n    },\r\n\r\n    // 查\r\n    find(selector,scope){//find返回的是一个数组\r\n        // 如果存在scope参数，在scope中寻找选择器\r\n        return (scope || document).querySelectorAll(selector);\r\n    },\r\n    parent(node){\r\n        return node.parentNode;\r\n    },\r\n    children(node){\r\n        return node.children;\r\n    },\r\n    siblings(node){\r\n        // node.parentNode.children 是一个伪数组 不能直接用filter()排除自己\r\n        // 转化为数组\r\n        return Array.from(node.parentNode.children).filter(n=>n!==node);\r\n    },\r\n    next(node){\r\n        let x = node.nextSibling;\r\n        while(x && x.nodeType === 3){\r\n            x = x.nextSibling;\r\n        }\r\n        return x;\r\n    },\r\n    previous(node){let x = node.previousSibling;\r\n        while(x && x.nodeType === 3){\r\n            x = x.previousSibling;\r\n        }\r\n        return x;\r\n    },\r\n    each(nodeList,fn){\r\n        for(let i=0;i<nodeList.length;i++){\r\n            fn.call(null,nodeList[i]);\r\n        }\r\n    },\r\n    index(node){\r\n        const list = dom.children(node.parentNode);\r\n        let i;\r\n        for(i=0;i<list.length;i++){\r\n            if(list[i] === node){\r\n                break;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n};\r\n"],"names":[],"version":3,"file":"index.755bdb92.js.map","sourceRoot":"/__parcel_source_root/"}